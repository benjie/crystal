# The aim of this test (vs `delete-relational-post.test.graphql`) is that
# because we do not query RelationalPost at all (i.e. no computed columns, no
# relations, etc) we should avoid selecting the record/all columns of the
# record. This will play better with column-base select grants.

## expect(queries[0].text).not.toContain('__relational_posts__::text')
## expect(queries[0].text).toContain('__relational_posts__."id"::text')

## expect(errors).toHaveLength(1)

## expect(data.d1.id).toEqual(4)

## expect(data.d2).toBe(null)

mutation {
  d1: deleteRelationalPostById(input: { id: 4 }) {
    ...Result
  }

  # Try and delete a record that doesn't exist
  d2: deleteRelationalPostById(input: { id: 3141592 }) {
    ...Result
  }
}

fragment Result on DeleteRelationalPostByIdPayload {
  id
}
