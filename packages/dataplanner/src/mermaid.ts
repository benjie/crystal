/*
 * This file contains all our utilities for dealing with Mermaid-js
 */

import type { Aether } from ".";
import type { BucketDefinitionFieldOutputMap } from "./bucket";
import { crystalPrintPathIdentity } from "./crystalPrint";
import type { ExecutablePlan } from "./plan";
import { __ItemPlan, __ListTransformPlan } from "./plans";
import { stripAnsi } from "./stripAnsi";

/**
 * An array of hex colour codes that we use for colouring the buckets/steps in
 * the mermaid-js plan diagram.
 *
 * Generated by mokole.com/palette.html; re-ordered by Jem
 */
export const COLORS = [
  "#696969",
  "#00bfff",
  "#7f007f",
  "#ffa500",
  "#0000ff",
  "#7fff00",
  "#ff1493",
  "#808000",
  "#dda0dd",
  "#ff0000",
  "#ffff00",
  "#00ffff",
  "#4169e1",
  "#3cb371",
  "#a52a2a",
  "#ff00ff",
  "#f5deb3",
];

/**
 * Given a string, escapes the string so that it can be embedded as the description of a node in a mermaid chart.
 *
 * 1. If it's already safe, returns it verbatim
 * 2. If it contains disallowed characters, escape them by replacing them with similar-looking characters,
 * 3. Wrap the string in quote marks.
 *
 * @remarks
 *
 * NOTE: rather than doing literal escapes, we replace with lookalike characters because:
 *
 * 1. Mermaid has a bug when calculating the width of the node that doesn't respect escapes,
 * 2. It's easier to read the raw mermaid markup with substitutes rather than messy escapes.
 *
 * @internal
 */
export const mermaidEscape = (str: string): string => {
  if (str.match(/^[a-z0-9 ]+$/i)) {
    return str;
  }
  // Technically we should replace with escapes like this:
  //.replace(/[#"]/g, (l) => ({ "#": "#35;", '"': "#quot;" }[l as any]))
  // However there's a bug in Mermaid's rendering that causes the node to use
  // the escaped string as the width for the node rather than the unescaped
  // string. Thus we replace with similar looking characters.
  return `"${stripAnsi(str.trim())
    .replace(
      /[#"<>]/g,
      (l) => ({ "#": "ꖛ", '"': "”", "<": "ᐸ", ">": "ᐳ" }[l as any]),
    )
    .replace(/\r?\n/g, "<br />")}"`;
};

export interface PrintPlanGraphOptions {
  printPathRelations?: boolean;
  includePaths?: boolean;
  concise?: boolean;
}

/**
 * Convert an Aether into a plan graph; call this via `aether.printPlanGraph()`
 * rather than calling this function directly.
 *
 * @internal
 */
export function printPlanGraph(
  aether: Aether,
  {
    // printPathRelations = false,
    includePaths = true,
    concise = false,
  }: PrintPlanGraphOptions,
  {
    pathIdentitiesByPlanId,
    plans,
  }: {
    pathIdentitiesByPlanId: ReturnType<Aether["getPathIdentitiesByPlanId"]>;
    plans: Aether["plans"];
  },
): string {
  const color = (i: number) => {
    return COLORS[i % COLORS.length];
  };

  const planStyle = `fill:#fff,stroke-width:3px,color:#000`;
  const itemplanStyle = `fill:#fff,stroke-width:6px,color:#000`;
  const sideeffectplanStyle = `fill:#f00,stroke-width:6px,color:#000`;
  const graph = [
    `${concise ? "flowchart" : "graph"} TD`,
    `    classDef path fill:#eee,stroke:#000,color:#000`,
    `    classDef plan ${planStyle}`,
    `    classDef itemplan ${itemplanStyle}`,
    `    classDef sideeffectplan ${sideeffectplanStyle}`,
    `    classDef bucket fill:#f6f6f6,color:#000,stroke-width:6px,text-align:left`,
    ``,
  ];

  const squish = (str: string, start = 8, end = 8): string => {
    if (str.length > start + end + 4) {
      return `${str.slice(0, start)}...${str.slice(str.length - end)}`;
    }
    return str;
  };

  const planIdMap = Object.create(null);
  const planId = (plan: ExecutablePlan): string => {
    if (!planIdMap[plan.id]) {
      const planName = plan.constructor.name.replace(/Plan$/, "");
      const planNode = `${planName}${plan.id}`;
      planIdMap[plan.id] = planNode;
      const rawMeta = plan.toStringMeta();
      const strippedMeta = rawMeta != null ? stripAnsi(rawMeta) : null;
      const meta =
        concise && strippedMeta ? squish(strippedMeta) : strippedMeta;

      const groups =
        plan.groupIds.length === 1 && plan.groupIds[0] === plan.primaryGroupId
          ? ""
          : ` {${plan.groupIds}}`;
      const planString = `${planName}[${plan.id.replace(/^_/, "")}${
        aether.buckets.length > 1 ? `∈${plan.bucketId}` : ""
      }${plan.primaryGroupId > 0 ? `@${plan.primaryGroupId}` : ""}]${groups}${
        meta ? `\n<${meta}>` : ""
      }`;
      const [lBrace, rBrace] =
        plan instanceof __ItemPlan
          ? [">", "]"]
          : plan.isSyncAndSafe
          ? ["[", "]"]
          : ["[[", "]]"];
      const planClass = plan.hasSideEffects
        ? "sideeffectplan"
        : plan instanceof __ItemPlan
        ? "itemplan"
        : "plan";
      graph.push(
        `    ${planNode}${lBrace}${mermaidEscape(
          planString,
        )}${rBrace}:::${planClass}`,
      );
    }
    return planIdMap[plan.id];
  };

  /*
  const pathIdMap = Object.create(null);
  const pathCounter = 0;
  const pathId = (pathIdentity: string, isItemPlan = false): string => {
    if (!pathIdMap[pathIdentity]) {
      pathIdMap[pathIdentity] = `P${++pathCounter}`;
      const [lBrace, rBrace] = isItemPlan
        ? [">", "]"]
        : aether.fieldDigestByPathIdentity[pathIdentity]?.listDepth > 0
        ? ["[/", "\\]"]
        : aether.fieldDigestByPathIdentity[pathIdentity]?.isLeaf
        ? ["([", "])"]
        : ["{{", "}}"];
      graph.push(
        `    ${pathIdMap[pathIdentity]}${lBrace}${mermaidEscape(
          crystalPrintPathIdentity(pathIdentity, 2, 3),
        )}${rBrace}:::path`,
      );
    }
    return pathIdMap[pathIdentity];
  };
    graph.push("    %% subgraph fields");
    {
      const recurse = (parent: FieldDigest) => {
        let parentId = pathId(parent.pathIdentity);
        if (parent.itemPathIdentity !== parent.pathIdentity) {
          const newParentId = pathId(parent.itemPathIdentity, true);
          graph.push(`    ${parentId} -.- ${newParentId}`);
          parentId = newParentId;
        }
        if (parent.childFieldDigests) {
          for (const child of parent.childFieldDigests) {
            recurse(child);
            const childId = pathId(child.pathIdentity);
            if (printPathRelations) {
              graph.push(
                `    ${
                  printPathRelations ? "" : "%% "
                }${parentId} -.-> ${childId}`,
              );
            }
          }
        }
      };
      recurse(aether.rootFieldDigest!);
    }
    graph.push("    %% end");
    */

  graph.push("");
  graph.push("    %% define plans");
  aether.processPlans("printingPlans", "dependencies-first", (plan) => {
    planId(plan);
    return plan;
  });

  graph.push("");
  graph.push("    %% plan dependencies");
  const chainByDep: { [depNode: string]: string } = {};
  aether.processPlans("printingPlanDeps", "dependencies-first", (plan) => {
    const planNode = planId(plan);
    const depNodes = plan.dependencies.map((depId) => {
      return planId(plans[depId]);
    });
    const transformItemPlanNode =
      plan instanceof __ListTransformPlan
        ? planId(
            plans[aether.transformDependencyPlanIdByTransformPlanId[plan.id]],
          )
        : null;
    if (depNodes.length > 0) {
      if (plan instanceof __ItemPlan) {
        const [firstDep, ...rest] = depNodes;
        const arrow = plan.transformPlanId == null ? "==>" : "-.->";
        graph.push(`    ${firstDep} ${arrow} ${planNode}`);
        if (rest.length > 0) {
          graph.push(`    ${rest.join(" & ")} --> ${planNode}`);
        }
      } else {
        if (
          concise &&
          plan.dependentPlans.length === 0 &&
          depNodes.length === 1
        ) {
          // Try alternating the nodes so they render closer together
          const depNode = depNodes[0];
          if (chainByDep[depNode] === undefined) {
            graph.push(`    ${depNode} --> ${planNode}`);
          } else {
            graph.push(`    ${chainByDep[depNode]} o--o ${planNode}`);
          }
          chainByDep[depNode] = planNode;
        } else {
          graph.push(`    ${depNodes.join(" & ")} --> ${planNode}`);
        }
      }
    }
    if (transformItemPlanNode) {
      graph.push(`    ${transformItemPlanNode} -.-> ${planNode}`);
    }
    return plan;
  });

  if (includePaths) {
    graph.push("");
    graph.push("    %% plan-to-path relationships");
    {
      for (const [pathPlanId, pathIdentities] of Object.entries(
        pathIdentitiesByPlanId,
      )) {
        const crystalPathIdentities = pathIdentities.reduce(
          (memo, pathIdentity) => {
            const crystalPathIdentity = crystalPrintPathIdentity(pathIdentity);
            if (!memo[crystalPathIdentity]) {
              memo[crystalPathIdentity] = 0;
            }
            memo[crystalPathIdentity]++;
            return memo;
          },
          Object.create(null) as {
            [crystalPrintPathIdentity: string]: number;
          },
        );
        const text = Object.entries(crystalPathIdentities)
          .sort((a, z) => z[1] - a[1])
          .map(([id, count]) => `${id}${count > 1 ? ` x${count}` : ""}`)
          .join("\n");
        const pathNode = `P${pathPlanId}`;
        graph.push(`    ${pathNode}[${mermaidEscape(text)}]`);
        graph.push(`    ${planId(plans[pathPlanId])} -.-> ${pathNode}`);
      }
    }
  }
  /*
    {
      const recurse = (parent: FieldDigest) => {
        const parentId = pathId(parent.pathIdentity);
        graph.push(`    ${planId(plans[parent.planId])} -.-> ${parentId}`);
        if (parent.pathIdentity !== parent.itemPathIdentity) {
          const itemId = pathId(parent.itemPathIdentity);
          graph.push(
            `    ${planId(plans[parent.itemPlanId])} -.-> ${itemId}`,
          );
        }
        if (parent.childFieldDigests) {
          for (const child of parent.childFieldDigests) {
            recurse(child);
          }
        }
      };
      recurse(aether.rootFieldDigest!);
    }
    */

  graph.push("");
  graph.push("    subgraph Buckets");
  for (const bucket of aether.buckets) {
    const plansAndIds = Object.entries(plans).filter(
      ([id, plan]) => plan && plan.id === id && plan.bucketId === bucket.id,
    );
    const raisonDEtre = (() => {
      if (
        bucket.groupId === 0 &&
        bucket.itemPlanId == null &&
        bucket.polymorphicPlanIds == null
      ) {
        return "root";
      }
      const reasons: string[] = [];
      if (bucket.groupId != null) {
        reasons.push(
          `group${bucket.groupId}[${aether.groups[bucket.groupId].reason}]`,
        );
      }
      if (bucket.itemPlanId != null) {
        reasons.push(`item${bucket.itemPlanId}`);
      }
      if (bucket.polymorphicPlanIds != null) {
        reasons.push(
          `polymorphic${bucket.polymorphicPlanIds.join(
            "&",
          )}[${bucket.polymorphicTypeNames!.join("|")}]`,
        );
      }
      return reasons.join(", ");
    })();
    const outputMapStuff: string[] = [];
    const processObject = (
      obj: { [fieldName: string]: BucketDefinitionFieldOutputMap },
      path = "⠀⠀",
    ): void => {
      for (const fieldName in obj) {
        const def = obj[fieldName];
        const planIds = Object.values(def.planIdByRootPathIdentity);
        const allIdsSame = planIds.every((id) => id === planIds[0]);
        const planSource = allIdsSame
          ? planIds[0].replace(/^_/, "")
          : JSON.stringify(def.planIdByRootPathIdentity);
        outputMapStuff.push(
          `${path}${fieldName} <-${def.modeType}- ${planSource}`,
        );
        if (def.children) {
          processObject(
            def.children,
            `⠀${concise ? path.replace(/[^⠀]/g, "") : path + fieldName}.`,
          );
        }
      }
    };
    processObject(bucket.outputMap);
    graph.push(
      `    Bucket${bucket.id}(${mermaidEscape(
        `Bucket ${bucket.id} (${raisonDEtre})\n${
          bucket.copyPlanIds.length > 0
            ? `Deps: ${bucket.copyPlanIds
                .map((pId) => plans[pId].id.replace(/^_/, ""))
                .join(", ")}\n`
            : ""
        }${(concise
          ? bucket.rootPathIdentities.map((p) =>
              crystalPrintPathIdentity(p, 2, 3),
            )
          : bucket.rootPathIdentities
        ).join("\n")}\n${
          bucket.rootOutputPlanId != null
            ? `⠀ROOT <-${
                bucket.rootOutputModeType ?? "?"
              }- ${bucket.rootOutputPlanId.replace(/^_/, "")}\n`
            : ""
        }${outputMapStuff.join("\n")}`,
      )}):::bucket`,
    );
    graph.push(`    classDef bucket${bucket.id} stroke:${color(bucket.id)}`);
    graph.push(
      `    class ${[
        `Bucket${bucket.id}`,
        ...plansAndIds.map(([, plan]) => planId(plan)),
      ].join(",")} bucket${bucket.id}`,
    );
  }
  for (const bucket of aether.buckets) {
    const childNodes = bucket.children.map((c) => `Bucket${c.id}`);
    if (childNodes.length > 0) {
      graph.push(`    Bucket${bucket.id} --> ${childNodes.join(" & ")}`);
    }
  }
  graph.push("    end");

  const graphString = graph.join("\n");
  return graphString;
}
